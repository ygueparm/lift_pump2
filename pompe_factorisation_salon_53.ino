
#include "config.h"
#include "pompe.h"
#include "capteurs.h"
#include "securite.h"
//#include <Arduino.h>
#include <Preferences.h>
#include <esp_task_wdt.h>
#include "web_server.h"
//#define TEST   // laisser pour les test sur planche a pain
#undef TEST  // a activer pour la  production

#include <WiFi.h>
#include <DNSServer.h>
#include <ESPAsyncWebServer.h>
// initialisation serveur AP
String contenuTableau;
DNSServer dnsServer;
AsyncWebServer server(80);  // D√©claration du serveur sur le port 80

//instance pour sauvegarder les donn√©es
Preferences prefsPompe;
Preferences prefsnewTime1;  // pour stocker le temps de focntionnement de la pompe
unsigned long dernierDemarrageRecupere = 0;
// Prototype de la fonction chargerTableau()
void chargerTableau();
void setup() {
  Serial.begin(115200);
  Serial.println("\n[*] Creating AP");
  WiFi.mode(WIFI_AP);
  WiFi.softAP(ssid, password, 10);  // Utilisation du canal 10
  Serial.print("[+] AP Created with IP Gateway ");
  Serial.println(WiFi.softAPIP());
  //resistance de tirage pour les entr√©e :
  pinMode(CAPTEUR_NIVEAU_HAUT, INPUT_PULLDOWN);

  // Configure le DNS local avec le serveur AP
  //**** affiche le tableau des dernier demarrages
  // Configure le DNS local avec le serveur AP
  dnsServer.start(53, apHostname, WiFi.softAPIP());

  //pour enregistrer les donn√©s
  prefsPompe.begin("pompe", false);  // Nom de namespace "pompe"
  // initialisation des preference pour le temps de fonctionnement
  prefsnewTime1.begin("newTime1", false);

  //configuration watchdog
  esp_task_wdt_init(WDT_TIMEOUT, true);  //enable panic so ESP32 restarts
  esp_task_wdt_add(NULL);                //add current thread to WDT watch

  chargerTableau();  //charger les donn√©es sauvegard√© au demarrage

  // Initialisation des variables
  initialiserVariables();
  initialiserLed();
  // lancement du serveur web
  initWebServer();
  server.begin();
}
void loop() {
  dnsServer.processNextRequest();  //pour permettre au serveur DNS de traiter les requ√™tes entrantes de mani√®re continue.
  //reveil du watchdog
  esp_task_wdt_reset();
  unsigned long currentMillisled = millis();
  //recuperation de la valeur sauvegard√© du temps de fonctionnement moteur
  TEMP_FONCTIONNEMENT_MOTEUR = prefsnewTime1.getULong("timeValue", 0) * 1000;
  capteurs = lireCapteurs();  // Rafra√Æchir les valeurs avant le test

  //gestion du clignotement de la led sans utiliser delayüåûüåû
  if (moteurEnMarche) {
    digitalWrite(Led, HIGH);  // Forcer l'allumage de la LED lorsque le moteur est en marche
  } else {
    if (!moteurEnMarche && (currentMillisled - previousMillisled >= intervalled)) {
      previousMillisled = currentMillisled;  // Mettre √† jour le dernier moment de changement d'√©tat
      ledState = !ledState;                  // Inverser l'√©tat de la LED
      digitalWrite(Led, ledState);           // Mettre √† jour l'√©tat de la LED
      }
  }

  // üëøüëøsi il y a trop de securit√© on arrete l'esp32, ouais carrement peut etre a modifier vers une jolie page
  if (!verifierSecurite()) {
    return;
  }
  // debug sans utiliser de delay
  if (currentMillisled - previousMillis_print >= interval_print) {
    previousMillis_print = currentMillisled;  // Mise √† jour du dernier temps

    // Affichage des informations
    Serial.print("void loop √âtat du capteur de niveau haut : ");
    Serial.println(capteurs.niveauHaut);
    Serial.print("void loop √âtat contacteur : ");
    Serial.println(capteurs.etatContacteur);
    Serial.print("void loop √âtat du relais s√©curit√© : ");
    Serial.println(capteurs.etatRelaisSecurite);
    Serial.print("void loop moteur en marche : ");
    Serial.println(moteurEnMarche);
    Serial.print("etat si le capteur a √©t√© bloqu√© ");
    Serial.println(capteurBloque);
  }
  // D√©marrage du moteur de la pompeüòç
  if (peutDemarrerPompe(capteurs) && !moteurEnMarche && !capteurBloque) {
    activerPompe();
    moteurEnMarche = true;
    tempsDebut = capteurs.tempsActuel;
    tempsRelaisDeclenche = 0;  // R√©initialise le temps de d√©clenchement du relais de s√©curit√©
    tempsReel = 0;             // Mise √† z√©ro du temps de fonctionnement r√©el
    tempsNiveauHautActif = 0;  // R√©initialise le temps o√π niveauHaut est actif
    relaisDeclenche = false;   // R√©initialise l'√©tat du relais d√©clench√©
    Serial.println("D√©marrage du moteur.");
  } else {
    if (moteurEnMarche) {  // verification si le capteur niveau haut ne reste pas bloqu√©
      if (capteurs.niveauHaut == HIGH) {
        if (debutNiveauHaut == 0) {
          debutNiveauHaut = millis();  // Premier passage en HIGH
        } else if (millis() - debutNiveauHaut >= SEUIL_BLOCAGE) {
          capteurBloque = true;
          Serial.println("‚ö†Ô∏è Capteur niveauHaut bloqu√© d√©tect√© !");
          debutNiveauHaut = 0;  // Reset pour √©viter r√©p√©tition du message
        }
      } else {
        debutNiveauHaut = 0;  // R√©initialiser si le capteur repasse √† LOW
      }

      // Gestion s√©curit√© lorsque le moteur fonctionne üòñüòñ
      if (capteurs.etatRelaisSecurite == HIGH) {
        desactiverPompe();
        moteurEnMarche = false;
        relaisDeclenche = true;
        tempsRelaisDeclenche = capteurs.tempsActuel;  // Enregistre le moment du d√©clenchement
        // Incr√©menter le compteur de s√©curit√©
        securiteDeclenche++; //incremente le nombre de fois ou cela augmente
        Serial.println("Relais de s√©curit√© d√©clench√©.");
      }
      // Arr√™t automatique apr√®s un certain tempsüíìüíì
      else if (capteurs.tempsActuel - tempsDebut >= TEMP_FONCTIONNEMENT_MOTEUR) {
        desactiverPompe();
        moteurEnMarche = false;
        Serial.println("Arr√™t automatique du moteur apr√®s un certain temps");

        // Calcul du temps √©coul√© depuis le dernier d√©marrage
        unsigned long tempsEcoule_1 = capteurs.tempsActuel - dernierDemarrage;
        uint32_t jours = tempsEcoule_1 / JOUR;
        uint32_t heures = (tempsEcoule_1 % JOUR) / HEURE;
        uint32_t minutes = ((tempsEcoule_1 % JOUR) % HEURE) / MINUTE;

        // Affichage du temps √©coul√©
        Serial.print("Dernier d√©marrage il y a ");
        Serial.print(jours);
        Serial.print("j ");
        Serial.print(heures);
        Serial.print(":");
        if (minutes < 10) {
          Serial.print("0");
        }
        Serial.println(minutes);

        // Sauvegarde des donn√©esüì•üì•
        if (tempsDebut != 0) {
          tempsDepuisDernierDemarrage[indiceDerniereEntreeTempsDepuis] = tempsEcoule_1;
          indiceDerniereEntreeTempsDepuis = (indiceDerniereEntreeTempsDepuis + 1) % MAX_ENTRIES;
          Serial.print("Indice tableau temps depuis dernier d√©marrage : ");
          Serial.println(indiceDerniereEntreeTempsDepuis);
        }

        // R√©initialisation des variables
        dernierDemarrage = capteurs.tempsActuel;                    // Met √† jour le temps du dernier d√©marrage
        prefsPompe.putULong("dernierDemarrage", dernierDemarrage);  // Sauvegarde le dernier d√©marrage dans prefs
        sauvegarderTableau();

        // R√©initialiser les compteurs li√©s au capteur
        tempsNiveauHautActif = 0;
      }
    }
  }

  //calcul du temps reel de fcontionnement pas encore utiliser 

  if (tempsDebut != 0) {
    if (capteurs.etatContacteur == HIGH && !contacteurDeclenche) {
      tempsDebutReel = millis();
      contacteurDeclenche = true;
    } else if (capteurs.etatContacteur == LOW && contacteurDeclenche) {
      tempsFinReel = millis();
      //  tempsReel = tempsFinReel - tempsDebutReel;

      tempsReel = (tempsFinReel - tempsDebutReel) / 1000;  // Conversion en secondes

      Serial.print("Temps de fonctionnement r√©el : ");
      Serial.print(tempsReel);
      Serial.println(" secondes  ");
      miseAJourEffectuee = true;  //valide la mise a jour du tableau
      contacteurDeclenche = false;
    }
  }
}

void sauvegarderTableau() {
  // Sauvegarder chaque √©l√©ment du tableau
  for (int i = 0; i < MAX_ENTRIES; i++) {
    String key = "temps_" + String(i);  // Cl√© unique pour chaque entr√©e
    prefsPompe.putULong(key.c_str(), tempsDepuisDernierDemarrage[i]);
  }
  // Sauvegarder l'index circulaire
  prefsPompe.putInt("indice_tableau", indiceDerniereEntreeTempsDepuis);
  Serial.println("Donn√©es du tableau sauvegard√©es avec succ√®s.");
}

void chargerTableau() {
  // Charger chaque √©l√©ment du tableau
  for (int i = 0; i < MAX_ENTRIES; i++) {
    String key = "temps_" + String(i);
    tempsDepuisDernierDemarrage[i] = prefsPompe.getULong(key.c_str(), 0);  // Valeur par d√©faut √† 0 si absent
  }
  // Charger l'index circulaire
  indiceDerniereEntreeTempsDepuis = prefsPompe.getInt("indice_tableau", 0);  // Valeur par d√©faut √† 0 si absent
  // Charger le dernier d√©marrage
  dernierDemarrage = prefsPompe.getULong("dernierDemarrage", 0);  // Valeur par d√©faut √† 0 si absent
  Serial.println("Donn√©es du tableau charg√©es avec succ√®s.");
}
